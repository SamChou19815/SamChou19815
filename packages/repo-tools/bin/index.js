module.exports=function(e,t){"use strict";var n={};function __webpack_require__(t){if(n[t]){return n[t].exports}var o=n[t]={i:t,l:false,exports:{}};var r=true;try{e[t].call(o.exports,o,o.exports,__webpack_require__);r=false}finally{if(r)delete n[t]}o.l=true;return o.exports}__webpack_require__.ab=__dirname+"/";function startup(){return __webpack_require__(543)}return startup()}({129:function(e){e.exports=require("child_process")},187:function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:true});const r=n(969);const s=n(871);const a=o(n(478));const i=n(499);const c=()=>["dummy",{workflowName:"Dummy",workflowtrigger:{triggerPaths:["**"],masterBranchOnly:false},workflowJobs:[{jobName:"lint",jobSteps:[r.githubActionJobRunStep("Success",'echo "Lint nothing."')]},{jobName:"build",jobSteps:[r.githubActionJobRunStep("Success",'echo "Build nothing."')]},{jobName:"test",jobSteps:[r.githubActionJobRunStep("Success",'echo "Test nothing."')]}]}];const u=()=>["ts-js",{workflowName:"TS and JS",workflowtrigger:{triggerPaths:[".github/workflows/generated-ts-js.yml","**.js","**.ts","**.jsx","**.tsx"],masterBranchOnly:false},workflowJobs:[{jobName:"lint",jobSteps:[...i.yarnWorkspaceBoilterplateSetupSteps,r.githubActionJobRunStep("Lint","yarn lint")]},{jobName:"test",jobSteps:[...i.yarnWorkspaceBoilterplateSetupSteps,r.githubActionJobRunStep("Test","yarn test")]}]}];const p=()=>["lint-markdown",{workflowName:"lint-markdown",workflowtrigger:{triggerPaths:[".github/workflows/generated-lint-markdown.yml"],masterBranchOnly:false},workflowJobs:[{jobName:"lint",jobSteps:[r.githubActionJobActionStep("actions/checkout@v2"),r.githubActionJobActionStep("actions/setup-ruby@v1"),r.githubActionJobRunStep("Setup Markdown Lint","gem install mdl"),r.githubActionJobRunStep("Run Markdown Lint","mdl .")]}]}];const l=()=>["codegen-porcelain",{workflowName:"lint-generated",workflowtrigger:{triggerPaths:["**"],masterBranchOnly:false},workflowJobs:[{jobName:"lint",jobSteps:[s.GITHUB_ACTIONS_CHECKOUT_STEP,s.GITHUB_ACTIONS_SETUP_NODE_STEP,r.githubActionJobRunStep("Codegen","./repo-tools codegen"),r.githubActionJobRunStep("Check changed","git status --porcelain")]}]}];const d={serviceName:"Generate GitHub Actions Workflow",generatedFilenamePattern:".github/workflows/generated-*",generatedCodeContentList:[c(),u(),p(),l(),...Object.entries(i.getYarnWorkspaceWorkflows(a.default))].map(([e,t])=>({pathForGeneratedCode:`.github/workflows/generated-${e}.yml`,generatedCode:r.githubActionWorkflowToString(t)}))};t.default=d},349:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:true});const o=n(747);const r=o.readFileSync(".gitignore");const s=o.readFileSync("configuration/styleignore.additions");const a=`# @generated\n\n${r}\n${s}`;const i={serviceName:"Generate ignore files derived from .gitignore",generatedCodeContentList:[{pathForGeneratedCode:".eslintignore",generatedCode:a},{pathForGeneratedCode:".prettierignore",generatedCode:a}]};t.default=i},370:function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:true});const r=n(129);const s=n(747);const a=o(n(187));const i=o(n(349));const c=o(n(485));const u=[a.default,i.default,c.default];const p=()=>{u.forEach(e=>{const{generatedFilenamePattern:t,generatedCodeContentList:n}=e;if(t!=null){r.spawnSync("rm",[t],{shell:true})}n.forEach(({pathForGeneratedCode:e,generatedCode:t})=>s.writeFileSync(e,t))})};t.default=p},463:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:true});const o=n(129);const r=n(747);const s=n(622);const a=()=>{const e=new Map;const t=o.spawnSync("yarn",["workspaces","list","-v","--json"],{shell:true});const n=t.stdout.toString().trim();const a=`[${n.split("\n").join(",")}]`;const i=JSON.parse(a);i.forEach(({name:t,location:n,workspaceDependencies:o})=>{var a,i;if(t==null){return}const c=o.map(e=>{if(!e.startsWith("packages/")){throw new Error(`Bad dependency of ${t}: ${e}`)}return e.substring("packages/".length)});const u=JSON.parse(r.readFileSync(s.join(n,"package.json")).toString());e.set(t,{inRepoWorkspaceDependencies:c,devSamRepositoryDependencies:(a=u.devSamRepositoryDependencies)!==null&&a!==void 0?a:[],deploymentDependencies:(i=u.deploymentDependencies)!==null&&i!==void 0?i:[]})});return e};t.default=a},477:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:true});const n=e=>{const t=[];const n=[];const o=[];e.forEach(e=>{if(e.startsWith("@dev-sam")){t.push(e)}else if(e.startsWith("lib-")){n.push(e)}else{o.push(e)}});return{toolingWorkspaces:t,libraryWorkspaces:n,projectWorkspaces:o}};t.default=n},478:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:true});const n={};t.default=n},485:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:true});const o=n(740);const r={serviceName:"Generate static json",generatedCodeContentList:[{pathForGeneratedCode:"configuration/libraries.json",generatedCode:`${JSON.stringify(o.libraryWorkspaces,undefined,2)}\n`}]};t.default=r},499:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:true});t.getYarnWorkspaceWorkflows=t.yarnWorkspaceBoilterplateSetupSteps=void 0;const o=n(740);const r=n(969);const s=n(871);t.yarnWorkspaceBoilterplateSetupSteps=[s.GITHUB_ACTIONS_CHECKOUT_STEP,s.GITHUB_ACTIONS_SETUP_NODE_STEP,s.GITHUB_ACTIONS_USE_YARN_CACHE_STEP,r.githubActionJobRunStep("Yarn Install","yarn install")];const a=e=>[...o.getYarnWorkspaceInRepoDependencyChain(e).map(e=>`packages/${e.startsWith("@dev-sam/")?e.substring("@dev-sam/".length):e}/**`),"package.json","yarn.lock","configuration/**",`.github/workflows/generated-*-${e}.yml`];const i=(e,n)=>({workflowName:`CI ${e}`,workflowtrigger:{triggerPaths:a(e),masterBranchOnly:false},workflowJobs:[{jobName:"build",jobSteps:[...t.yarnWorkspaceBoilterplateSetupSteps,...n,...o.getYarnWorkspaceDevSamRepositoryDependencies(e).map(s.getDevSamRepositoryDependencySetupSteps).flat(),r.githubActionJobRunStep("Compile",`yarn workspace ${e} compile`)]}]});const c=(e,n)=>({workflowName:`CD ${e}`,workflowtrigger:{triggerPaths:a(e),masterBranchOnly:true},workflowSecrets:["FIREBASE_TOKEN"],workflowJobs:[{jobName:"deploy",jobSteps:[...t.yarnWorkspaceBoilterplateSetupSteps,...n,...o.getYarnWorkspaceDevSamRepositoryDependencies(e).map(s.getDevSamRepositoryDependencySetupSteps).flat(),...o.getYarnWorkspaceDeploymentDependencies(e).map(s.getDeploymentDependencySetupStep),r.githubActionJobRunStep("Build",`yarn workspace ${e} build`),r.githubActionJobRunStep("Deploy",`yarn workspace ${e} deploy`)]}]});t.getYarnWorkspaceWorkflows=((e={})=>Object.fromEntries([...o.toolingWorkspaces.map(t=>{var n;const o=`ci-${t.substring("@dev-sam/".length)}`;return[o,i(t,(n=e[o])!==null&&n!==void 0?n:[])]}),...[...o.libraryWorkspaces,...o.projectWorkspaces].map(t=>{var n;const o=`ci-${t}`;return[o,i(t,(n=e[o])!==null&&n!==void 0?n:[])]}),...o.projectWorkspaces.map(t=>{var n;const o=`cd-${t}`;return[o,c(t,(n=e[o])!==null&&n!==void 0?n:[])]})]))},543:function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:true});const r=o(n(370));r.default()},622:function(e){e.exports=require("path")},740:function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};var r;Object.defineProperty(t,"__esModule",{value:true});t.getYarnWorkspaceDeploymentDependencies=t.getYarnWorkspaceDevSamRepositoryDependencies=t.getYarnWorkspaceInRepoDependencyChain=t.projectWorkspaces=t.libraryWorkspaces=t.toolingWorkspaces=void 0;const s=o(n(463));const a=o(n(477));const i=s.default();r=a.default(Array.from(i.keys())),t.toolingWorkspaces=r.toolingWorkspaces,t.libraryWorkspaces=r.libraryWorkspaces,t.projectWorkspaces=r.projectWorkspaces;const c=e=>{const t=i.get(e);if(t==null){throw new Error(`Workspace ${e} is not found!`)}return t};t.getYarnWorkspaceInRepoDependencyChain=(e=>{const t=[];const n=[];const o=new Set;const r=new Set;const s=e=>{if(r.has(e)){if(!o.has(e)){return}n.push(e);const t=n.indexOf(e);const r=n.slice(t,n.length).join(" -> ");throw new Error(`Cyclic dependency detected: ${r}`)}const a=c(e).inRepoWorkspaceDependencies;r.add(e);n.push(e);o.add(e);a.forEach(s);o.delete(e);n.pop();t.push(e)};s(e);return t});t.getYarnWorkspaceDevSamRepositoryDependencies=(e=>c(e).devSamRepositoryDependencies);t.getYarnWorkspaceDeploymentDependencies=(e=>c(e).deploymentDependencies)},747:function(e){e.exports=require("fs")},871:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:true});t.getDeploymentDependencySetupStep=t.getDevSamRepositoryDependencySetupSteps=t.GITHUB_ACTIONS_USE_YARN_CACHE_STEP=t.GITHUB_ACTIONS_SETUP_NODE_STEP=t.GITHUB_ACTIONS_CHECKOUT_STEP=void 0;const o=n(969);t.GITHUB_ACTIONS_CHECKOUT_STEP=o.githubActionJobActionStep("actions/checkout@v2");t.GITHUB_ACTIONS_SETUP_NODE_STEP=o.githubActionJobActionStep("actions/setup-node@v2-beta");t.GITHUB_ACTIONS_USE_YARN_CACHE_STEP=o.githubActionJobActionStep("actions/cache@v2",{path:".yarn/cache\n.pnp.js",key:"yarn-berry-${{ hashFiles('**/yarn.lock') }}","restore-keys":"yarn-berry-"});t.getDevSamRepositoryDependencySetupSteps=(e=>[o.githubActionJobRunStep(`Checkout SamChou19815/${e}`,`cd ../ && git clone https://\${{ secrets.DEPLOY_GH_PAGE_TOKEN }}@github.com/SamChou19815/${e} --depth 1`),o.githubActionJobRunStep(`Sanity Check ${e} setup`,`cat ../${e}/README.md`)]);const r=o.githubActionJobActionStep("GoogleCloudPlatform/github-actions/setup-gcloud@master",{project_id:"developer-sam",service_account_key:"${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}",export_default_credentials:"true"});t.getDeploymentDependencySetupStep=(e=>{if(e==="gcloud"){return r}throw new Error(`Unsupported deployment dependency: ${e}`)})},969:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:true});t.githubActionWorkflowToString=t.githubActionJobRunStep=t.githubActionJobActionStep=void 0;t.githubActionJobActionStep=((e,t={})=>({type:"use-action",actionName:e,actionArguments:t}));t.githubActionJobRunStep=((e,t)=>({type:"run",stepName:e,command:t}));const n=e=>{switch(e.type){case"use-action":{const t=`      - uses: ${e.actionName}\n`;if(Object.keys(e.actionArguments).length===0){return t}const n=Object.entries(e.actionArguments).map(([e,t])=>{const n=t.split("\n");if(n.length===1){return`          ${e}: ${n[0]}`}return`          ${e}: |\n${n.map(e=>`            ${e}`).join("\n")}`}).join("\n");return`${t}        with:\n${n}\n`}case"run":{const t=`      - name: ${e.stepName}\n`;const n=e.command.split("\n");if(n.length===1){return`${t}        run: ${n[0]}\n`}return`${t}        run: |\n${n.map(e=>`          ${e}\n`).join("")}`}default:throw new Error}};const o=({jobName:e,jobSteps:t})=>{return`  ${e}:\n    runs-on: ubuntu-latest\n    steps:\n${t.map(n).join("")}`};t.githubActionWorkflowToString=(({workflowName:e,workflowtrigger:{triggerPaths:t,masterBranchOnly:n},workflowSecrets:r=[],workflowJobs:s})=>{const a=`# @generated\n\nname: ${e}\non:\n  push:\n    paths:\n${t.map(e=>`      - '${e}'\n`).join("")}${n?`    branches:\n      - master\n`:""}${r.length>0?`env:\n${r.map(e=>`  ${e}: \${{ secrets.${e} }}`).join("\n")}\n`:""}\njobs:\n${s.map(o).join("")}`;return a})}});