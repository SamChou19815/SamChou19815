#!/usr/bin/env node
module.exports=(()=>{"use strict";var n={843:(n,e,r)=>{r.r(e);const t=require("fs");const o=require("path");const a=`\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: "2"\n      - uses: actions/setup-node@v2-beta\n      - uses: actions/cache@v2\n        with:\n          path: ".yarn/cache\\n.pnp.js"\n          key: "yarn-berry-\${{ hashFiles('**/yarn.lock') }}"\n          restore-keys: "yarn-berry-"\n      - name: Yarn Install\n        run: yarn install --immutable`;const i=(n,e,r)=>{var a,i;const s=n.information[e];if(s==null)throw new Error;return((i=(a=JSON.parse((0,t.readFileSync)((0,o.join)(s.workspaceLocation,"package.json")).toString()))===null||a===void 0?void 0:a.scripts)===null||i===void 0?void 0:i[r])!=null};const s=()=>{const n=JSON.parse((0,t.readFileSync)("workspaces.json").toString());return[[".github/workflows/generated-general.yml",`# @${"generated"}\n\nname: General\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  lint:${a}\n      - name: Format Check\n        run: yarn format:check\n      - name: Lint\n        run: yarn lint\n  build:${a}\n      - name: Compile\n        run: yarn compile\n  validate:${a}\n      - name: Codegen\n        run: yarn codegen\n      - name: Check changed\n        run: if [[ \`git status --porcelain\` ]]; then exit 1; fi\n  test:${a}\n      - name: Test\n        run: yarn test\n`],...n.topologicallyOrdered.filter(e=>i(n,e,"deploy")).map(e=>{var r,t;const o=`cd-${e}`;return[`.github/workflows/generated-${o}.yml`,`# @${"generated"}\n\nname: CD ${e}\non:\n  push:\n    paths:${((t=(r=n.information[e])===null||r===void 0?void 0:r.dependencyChain)!==null&&t!==void 0?t:[]).map(e=>{var r;return`\n      - '${(r=n.information[e])===null||r===void 0?void 0:r.workspaceLocation}/**'`}).join("")}\n      - 'configuration/**'\n      - '.github/workflows/generated-*-${e}.yml'\n    branches:\n      - master\n\njobs:\n  deploy:${a}\n      - name: Build\n        run: yarn workspace ${e} build\n      - name: Install Firebase\n        run: sudo npm install -g firebase-tools\n      - name: Deploy\n        run: FIREBASE_TOKEN=\${{ secrets.FIREBASE_TOKEN }} yarn workspace ${e} deploy\n`]})]};const c=s;var u=undefined&&undefined.__awaiter||function(n,e,r,t){function adopt(n){return n instanceof r?n:new r(function(e){e(n)})}return new(r||(r=Promise))(function(r,o){function fulfilled(n){try{step(t.next(n))}catch(n){o(n)}}function rejected(n){try{step(t["throw"](n))}catch(n){o(n)}}function step(n){n.done?r(n.value):adopt(n.value).then(fulfilled,rejected)}step((t=t.apply(n,e||[])).next())})};const l=(0,o.join)(".github","workflows");const d=()=>u(void 0,void 0,void 0,function*(){try{if(!(0,t.existsSync)(l)){(0,t.readdirSync)(l).forEach(n=>{if(n.startsWith("generated-")){(0,t.unlinkSync)((0,o.join)(l,n))}})}(0,t.mkdirSync)(l,{recursive:true});c().forEach(([n,e])=>{(0,t.writeFileSync)(n,e)})}catch(n){console.error(n);process.exit(1)}});d()}};var e={};function __webpack_require__(r){if(e[r]){return e[r].exports}var t=e[r]={exports:{}};var o=true;try{n[r](t,t.exports,__webpack_require__);o=false}finally{if(o)delete e[r]}return t.exports}(()=>{__webpack_require__.r=(n=>{if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(n,"__esModule",{value:true})})})();__webpack_require__.ab=__dirname+"/";return __webpack_require__(843)})();