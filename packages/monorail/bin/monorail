#!/usr/bin/env node
(function(e){var t={};function __webpack_require__(n){if(t[n]){return t[n].exports}var o=t[n]={i:n,l:false,exports:{}};e[n].call(o.exports,o,o.exports,__webpack_require__);o.l=true;return o.exports}__webpack_require__.m=e;__webpack_require__.c=t;__webpack_require__.d=function(e,t,n){if(!__webpack_require__.o(e,t)){Object.defineProperty(e,t,{enumerable:true,get:n})}};__webpack_require__.r=function(e){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(e,"__esModule",{value:true})};__webpack_require__.t=function(e,t){if(t&1)e=__webpack_require__(e);if(t&8)return e;if(t&4&&typeof e==="object"&&e&&e.__esModule)return e;var n=Object.create(null);__webpack_require__.r(n);Object.defineProperty(n,"default",{enumerable:true,value:e});if(t&2&&typeof e!="string")for(var o in e)__webpack_require__.d(n,o,function(t){return e[t]}.bind(null,o));return n};__webpack_require__.n=function(e){var t=e&&e.__esModule?function getDefault(){return e["default"]}:function getModuleExports(){return e};__webpack_require__.d(t,"a",t);return t};__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s=5)})([function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("child_process")},function(e,t,n){"use strict";n.d(t,"b",(function(){return assertIsString}));n.d(t,"c",(function(){return assertIsStringArray}));n.d(t,"a",(function(){return assertHasFields}));const assertIsString=(e,t)=>{if(typeof t!=="string"){throw new Error(`Expect '${e}' to be a string!`)}return t};const assertIsStringArray=(e,t,n=false)=>{if(n&&t==null){return[]}if(t==null||!Array.isArray(t)){throw new Error(`Expect '${e}' to be a string array!`)}const o=t.filter(e=>typeof e==="string");if(o.length!==t.length){throw new Error(`Expect '${e}' to be a string array!`)}return o};const assertHasFields=(e,t,n)=>{if(n==null){throw new Error(`Expect '${e}' to be an object, but got undefined or null!`)}if(typeof n!=="object"){throw new Error(`Expect '${e}' to be an object, but got ${typeof n}!`)}const o={};const r=t.filter(e=>{const t=n[e];if(t!=null){o[e]=t}return t==null});if(r.length>0){throw new Error(`'${e}' has missing fields: [${r.join(", ")}]`)}return o}},function(e,t,n){"use strict";n.r(t);n.d(t,"PROJECT_ROOT_DIRECTORY",(function(){return a}));n.d(t,"PROJECT_CONFIGURATION",(function(){return l}));var o=n(0);var r=n.n(o);var s=n(1);var c=n.n(s);var i=n(3);const parseRepoToolsConfiguration=e=>{const{binary:t,organizationName:n,toolingPrefixes:o,deploymentSecrets:r}=Object(i["a"])("repoToolsConfiguration",["binary","organizationName","toolingPrefixes","deploymentSecrets"],e);return{binary:Object(i["b"])("binary",t),organizationName:Object(i["b"])("organizationName",n),toolingPrefixes:Object(i["c"])("toolingPrefixes",o),deploymentSecrets:Object(i["c"])("deploymentSecrets",r)}};const loadRepoToolsConfigurationAndFindRoot=()=>{let e=process.cwd();while(e!=="/"){const t=Object(s["join"])(e,"package.json");if(Object(o["existsSync"])(t)&&Object(o["lstatSync"])(t).isFile()){const n=JSON.parse(Object(o["readFileSync"])(t).toString());if(Array.isArray(n.workspaces)){return[e,parseRepoToolsConfiguration(n.repoToolsConfiguration)]}}e=Object(s["dirname"])(e)}throw new Error("No configuration found. Abort!")};const[a,l]=loadRepoToolsConfigurationAndFindRoot()},function(e,t,n){e.exports=n(6)},function(e,t,n){"use strict";n.r(t);var o=n(2);var r=n(0);var s=n(1);const singleSourceNeedsRebuild=(e,t)=>Object(r["statSync"])(e).mtime.getTime()>=t;const workspaceSourcesNeedRebuild=(e,t,n)=>{const o=Object(s["resolve"])(Object(s["join"])(e,t));const recursiveVisit=e=>{if(Object(r["lstatSync"])(e).isFile()){return singleSourceNeedsRebuild(e,n)}return Object(r["readdirSync"])(e).some(t=>recursiveVisit(Object(s["join"])(e,t)))};return recursiveVisit(o)};var c=workspaceSourcesNeedRebuild;var i=n(3);const validateCodegenConfiguration=e=>{const{sources:t,output:n}=Object(i["a"])("codegenConfiguration",["sources","output"],e);return{sources:Object(i["c"])("sources",t),output:Object(i["b"])("output",n)}};const queryYarnForWorkspaceInformation=()=>{const e=new Map;const t=Object(o["spawnSync"])("yarn",["workspaces","list","-v","--json"]);const n=t.stdout.toString().trim();const c=`[${n.split("\n").join(",")}]`;const a=JSON.parse(c);a.forEach(({name:t,location:n,workspaceDependencies:o})=>{var c;if(t==null){return}const a=o.map(e=>{if(!e.startsWith("packages/")){throw new Error(`Bad dependency of ${t}: ${e}`)}return e.substring("packages/".length)});const l=JSON.parse(Object(r["readFileSync"])(Object(s["join"])(n,"package.json")).toString());e.set(t,{workspaceLocation:n,hasCompileScript:((c=l.scripts)===null||c===void 0?void 0:c.compile)!=null,inRepoWorkspaceDependencies:a,githubRepositoryDependencies:Object(i["c"])("githubRepositoryDependencies",l.githubRepositoryDependencies,true),deploymentDependencies:Object(i["c"])("deploymentDependencies",l.deploymentDependencies,true),codegenConfiguration:l.codegenConfiguration==null?undefined:validateCodegenConfiguration(l.codegenConfiguration)})});return e};var a=queryYarnForWorkspaceInformation;var l=n(4);const classifyYarnWorkspaces=e=>{const t=[];const n=[];const o=[];e.forEach(e=>{if(l["PROJECT_CONFIGURATION"].toolingPrefixes.some(t=>e.startsWith(t))){t.push(e)}else if(e.startsWith("lib-")){n.push(e)}else{o.push(e)}});return{toolingWorkspaces:t,libraryWorkspaces:n,projectWorkspaces:o}};var u=classifyYarnWorkspaces;const p=a();const{toolingWorkspaces:d,libraryWorkspaces:g,projectWorkspaces:f}=u(Array.from(p.keys()));const getWorkspaceInformation=e=>{const t=p.get(e);if(t==null){throw new Error(`Workspace ${e} is not found!`)}return t};const getYarnWorkspaceLocation=e=>getWorkspaceInformation(e).workspaceLocation;const getYarnWorkspaceHasCompileScript=e=>getWorkspaceInformation(e).hasCompileScript;const getYarnWorkspaceInRepoDependencyChain=e=>{const t=[];const n=[];const o=new Set;const r=new Set;const visit=e=>{if(r.has(e)){if(!o.has(e)){return}n.push(e);const t=n.indexOf(e);const r=n.slice(t,n.length).join(" -> ");throw new Error(`Cyclic dependency detected: ${r}`)}const s=getWorkspaceInformation(e).inRepoWorkspaceDependencies;r.add(e);n.push(e);o.add(e);s.forEach(visit);o.delete(e);n.pop();t.push(e)};visit(e);return t};const getYarnWorkspacesInTopologicalOrder=()=>{const e=[];const t=new Set;Array.from(p.keys()).forEach(n=>{const o=getYarnWorkspaceInRepoDependencyChain(n);o.forEach(n=>{if(!t.has(n)){e.push(n);t.add(n)}})});return e};const getYarnWorkspaceGitHubRepositoryDependencies=e=>getWorkspaceInformation(e).githubRepositoryDependencies;const getYarnWorkspaceDeploymentDependencies=e=>getWorkspaceInformation(e).deploymentDependencies;const sourcesNeedRebuild=(e,t,n)=>{const o=Object(s["join"])(e,n);return c(e,t,Object(r["existsSync"])(o)?Object(r["statSync"])(o).mtime.getTime():0)};const cachedBuildTargetDeterminator=()=>Array.from(p.entries()).filter(([,{workspaceLocation:e,codegenConfiguration:t}])=>t!=null&&t.sources.some(n=>sourcesNeedRebuild(e,n,t.output))).map(([e])=>e);var b=cachedBuildTargetDeterminator;const cachedBuild=async()=>{console.log("--- Monorail Cached Build Service ---");const e=b();if(e.length===0){console.log("[✓] No need to rebuild!");return}console.group(`[${e.join(", ")}] needs to be rebuilt!`);const t=e.map(e=>{console.log(`Rebuiding \`${e}\`...`);return[e,Object(o["spawnSync"])("yarn",["workspace",e,"codegen"],{stdio:["inherit",process.env.INCLUDE_ERROR?"inherit":"ignore","inherit"]}).status===0]});console.groupEnd();const n=t.filter(([,e])=>!e).map(([e])=>e);if(n.length===0){console.log("[✓] All workspaces have been successfully rebuilt!");return}throw new Error(`[x] [${n.join(", ")}] failed to exit with 0`)};var m=cachedBuild;const parseCommandLineArgumentsIntoCommand=()=>{const e=process.argv.slice(2);if(e.length===0){return"CODEGEN"}switch(e[0].toLowerCase()){case"codegen":return"CODEGEN";case"compile":case"c":return"COMPILE";case"no-changed":case"nc":return"NO_CHANGED";case"rebuild":case"r":return"REBUILD";case"sync":case"s":return"SYNC";default:throw new Error(`Unknown command: ${e[0]}`)}};var y=parseCommandLineArgumentsIntoCommand;const githubActionJobActionStep=(e,t={})=>({type:"use-action",actionName:e,actionArguments:t});const githubActionJobRunStep=(e,t)=>({type:"run",stepName:e,command:t});const githubActionJobStepToString=e=>{switch(e.type){case"use-action":{const t=`      - uses: ${e.actionName}\n`;if(Object.keys(e.actionArguments).length===0){return t}const n=Object.entries(e.actionArguments).map(([e,t])=>{const n=t.split("\n");if(n.length===1){return`          ${e}: ${n[0]}`}return`          ${e}: |\n${n.map(e=>`            ${e}`).join("\n")}`}).join("\n");return`${t}        with:\n${n}\n`}case"run":{const t=`      - name: ${e.stepName}\n`;const n=e.command.split("\n");if(n.length===1){return`${t}        run: ${n[0]}\n`}return`${t}        run: |\n${n.map(e=>`          ${e}\n`).join("")}`}default:throw new Error}};const githubActionJobToString=({jobName:e,jobSteps:t})=>`  ${e}:\n    runs-on: ubuntu-latest\n    steps:\n${t.map(githubActionJobStepToString).join("")}`;const githubActionWorkflowToString=({workflowName:e,workflowtrigger:{triggerPaths:t,masterBranchOnly:n},workflowSecrets:o=[],workflowJobs:r})=>{const s=`# @generated\n\nname: ${e}\non:\n  push:\n    paths:\n${t.map(e=>`      - '${e}'\n`).join("")}${n?`    branches:\n      - master\n`:""}${o.length>0?`env:\n${o.map(e=>`  ${e}: \${{ secrets.${e} }}`).join("\n")}\n`:""}\njobs:\n${r.map(githubActionJobToString).join("")}`;return s};const w=githubActionJobActionStep("actions/checkout@v2");const h=githubActionJobActionStep("actions/setup-node@v2-beta");const j=githubActionJobActionStep("actions/cache@v2",{path:".yarn/cache\n.pnp.js",key:"yarn-berry-${{ hashFiles('**/yarn.lock') }}","restore-keys":"yarn-berry-"});const getGitHubRepositoryDependencySetupSteps=e=>[githubActionJobRunStep(`Checkout ${l["PROJECT_CONFIGURATION"].organizationName}/${e}`,`cd ../ && git clone https://\${{ secrets.GH_TOKEN }}@github.com/${l["PROJECT_CONFIGURATION"].organizationName}/${e} --depth 1`)];const O=githubActionJobRunStep("Install firebase-tools","sudo npm install -g firebase-tools");const _=githubActionJobActionStep("GoogleCloudPlatform/github-actions/setup-gcloud@master",{project_id:"${{ secrets.GCP_PROJECT_ID }}",service_account_key:"${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}",export_default_credentials:"true"});const getDeploymentDependencySetupStep=e=>{switch(e){case"firebase-tools":return O;case"gcloud":return _;default:throw new Error(`Unsupported deployment dependency: ${e}`)}};const k=[w,h,j,githubActionJobRunStep("Yarn Install","yarn install --immutable")];const yarnWorkspaceGetDependencyPaths=e=>[...getYarnWorkspaceInRepoDependencyChain(e).map(e=>`${getYarnWorkspaceLocation(e)}/**`),"configuration/**",`.github/workflows/generated-*-${e}.yml`];const generateYarnWorkspaceProjectCDWorkflow=e=>({workflowName:`CD ${e}`,workflowtrigger:{triggerPaths:yarnWorkspaceGetDependencyPaths(e),masterBranchOnly:true},workflowSecrets:l["PROJECT_CONFIGURATION"].deploymentSecrets,workflowJobs:[{jobName:"deploy",jobSteps:[...k,...getYarnWorkspaceGitHubRepositoryDependencies(e).map(getGitHubRepositoryDependencySetupSteps).flat(),githubActionJobRunStep("Build",`yarn workspace ${e} build`),...getYarnWorkspaceDeploymentDependencies(e).map(getDeploymentDependencySetupStep),githubActionJobRunStep("Deploy",`yarn workspace ${e} deploy`)]}]});const getYarnWorkspaceWorkflows=()=>Object.fromEntries([...f.map(e=>{const t=`cd-${e}`;return[t,generateYarnWorkspaceProjectCDWorkflow(e)]})]);const generateTSJSWorkflow=()=>["ts-js",{workflowName:"TS and JS",workflowtrigger:{triggerPaths:[".github/workflows/generated-ts-js.yml","package.json","**/package.json","**.js","**.ts","**.jsx","**.tsx"],masterBranchOnly:false},workflowJobs:[{jobName:"lint",jobSteps:[...k,githubActionJobRunStep("Format Check","yarn format:check"),githubActionJobRunStep("Lint","yarn lint")]},{jobName:"build",jobSteps:[githubActionJobActionStep("actions/checkout@v2",{"fetch-depth":"2"}),h,j,githubActionJobRunStep("Yarn Install","yarn install --immutable"),githubActionJobRunStep("Build","yarn compile")]},{jobName:"test",jobSteps:[...k,githubActionJobRunStep("Test","yarn test")]}]}];const generateCodegenPorcelainWorkflow=()=>["generated-in-sync",{workflowName:"lint-generated",workflowtrigger:{triggerPaths:["**"],masterBranchOnly:false},workflowJobs:[{jobName:"lint",jobSteps:[w,h,githubActionJobRunStep("Codegen",`${l["PROJECT_CONFIGURATION"].binary} codegen`),githubActionJobRunStep("Check changed",`${l["PROJECT_CONFIGURATION"].binary} no-changed`)]}]}];const S={serviceName:"Generate GitHub Actions Workflow",generatedFilenamePattern:".github/workflows/generated-*",generatedCodeContentList:[generateTSJSWorkflow(),generateCodegenPorcelainWorkflow(),...Object.entries(getYarnWorkspaceWorkflows())].map(([e,t])=>({pathForGeneratedCode:`.github/workflows/generated-${e}.yml`,generatedCode:githubActionWorkflowToString(t)}))};var $=S;const E=Object(r["readFileSync"])(".gitignore");const C=Object(r["readFileSync"])("configuration/styleignore.additions");const N=`# @generated\n\n${E}\n${C}`;const v={serviceName:"Generate ignore files derived from .gitignore",generatedCodeContentList:[{pathForGeneratedCode:".eslintignore",generatedCode:N},{pathForGeneratedCode:".prettierignore",generatedCode:N}]};var R=v;const T={serviceName:"Generate static json",generatedCodeContentList:[{pathForGeneratedCode:"configuration/libraries.json",generatedCode:`${JSON.stringify(g,undefined,2)}\n`}]};var x=T;const P=[$,R,x];const executeCodegenServices=()=>{P.forEach(e=>{const{generatedFilenamePattern:t,generatedCodeContentList:n}=e;if(t!=null){Object(o["spawnSync"])("git",["rm",t])}const s=n.map(({pathForGeneratedCode:e,generatedCode:t})=>{Object(r["writeFileSync"])(e,t);return e});Object(o["spawnSync"])("git",["add",...s])})};var D=executeCodegenServices;const I=Object(s["join"])(".monorail","incremental-compile.json");const getIncrementalCompileLastRunTime=()=>{if(!Object(r["existsSync"])(I)){return 0}return Number(JSON.parse(Object(r["readFileSync"])(I).toString()).lastRunTime)};const setIncrementalCompileLastRunTime=()=>{Object(r["mkdirSync"])(Object(s["dirname"])(I),{recursive:true});Object(r["writeFileSync"])(I,JSON.stringify({lastRunTime:(new Date).getTime()},undefined,2))};const incrementalCompile=async()=>{console.log("--- Monorail Incremental Compile Service ---");const e=getIncrementalCompileLastRunTime();const needToRecompileLocalCheck=t=>c(getYarnWorkspaceLocation(t),".",e);const needToRecompileCICheck=e=>Object(o["spawnSync"])("git",["diff","HEAD^","HEAD","--name-only",getYarnWorkspaceLocation(e)]).stdout.toString().trim().length>0;const t=process.env.CI?needToRecompileCICheck:needToRecompileLocalCheck;const n=getYarnWorkspacesInTopologicalOrder().filter(getYarnWorkspaceHasCompileScript).filter(t);if(n.length===0){console.log("[✓] Nothing needs to be recompiled!");return}console.group(`[${n.join(", ")}] needs to be re-compiled!`);const r=await Promise.all(n.map(e=>{console.log(`Compiling \`${e}\`...`);const t=Object(o["spawn"])("yarn",["workspace",e,"compile"]);return new Promise(n=>{t.on("exit",t=>n([e,t===0]))})}));console.groupEnd();const s=r.filter(([,e])=>!e).map(([e])=>e);if(s.length===0){console.log("[✓] All workspaces have been successfully compiled!");setIncrementalCompileLastRunTime();return}throw new Error(`[x] [${s.join(", ")}] failed to exit with 0`)};var F=incrementalCompile;const checkThatThereIsNoChangedFiles=()=>{const e=Object(o["spawnSync"])("git",["status","--porcelain"],{shell:true}).stdout.toString();if(e.length===0)return;throw new Error(`There are changed files! Generated files might be out-of-sync!\n${e}`)};var A=checkThatThereIsNoChangedFiles;const safeCopy=(e,t)=>{Object(r["mkdirSync"])(Object(s["dirname"])(t),{recursive:true});Object(r["copyFileSync"])(e,t)};const normalizedCommandForPrint=e=>e.map(e=>e.includes(" ")?`"${e}"`:e).join(" ");const synchronizeToRepository=(e,t)=>{Object.entries(t).forEach(([t,n])=>{safeCopy(t,Object(s["join"])("..",e,n))});console.log(`[✓] Synced files to target repository \`${e}\`.`);const n=Object(s["resolve"])(Object(s["join"])("..",e));if(Object(o["spawnSync"])("git",["status","--porcelain"],{cwd:n}).stdout.toString().trim()===""){console.log(`[✓] Target repository \`${e}\` is already in a clean state. Skip.`);return}const r=Object.values(t);const c=[["git","checkout","-b",`monorail/sync-service/t-${(new Date).getTime()}`],["git","add",...r],["git","commit","-m",`[monorail-sync] Automatic file sync commit from ${Object(s["basename"])(Object(s["resolve"])("."))}`],["gh","pr","create","--fill"]];console.group(`[✓] Making a pull request for synchronized files in \`${e}\`.`);if(process.env.DRY_RUN){c.forEach(e=>console.log(`> ${normalizedCommandForPrint(e)}`));console.groupEnd();console.log(`[✓] DRY_RUN for making PR for \`${e}\` completed.`)}else{c.forEach(e=>{const t=normalizedCommandForPrint(e);console.group(`> ${t}`);const r=Object(o["spawnSync"])(e[0],e.slice(1),{cwd:n});console.group();const pipeOutput=(e,t)=>{const n=e.toString().trim();if(!n)return;n.split("\n").filter(Boolean).forEach(e=>t?console.error(e):console.log(e))};if(r.status!==0||process.env.INCLUDE_ERROR){pipeOutput(r.stderr,true)}pipeOutput(r.stdout,false);console.groupEnd();console.groupEnd();if(r.status!==0){throw new Error(`Failed to run: \`${e}\``)}});console.groupEnd();console.log(`\n[✓] Made a pull request for synchronized files in \`${e}\`.`)}};const synchronize=()=>{const e=Object(s["join"])("configuration","sync-configuration.json");if(!Object(r["existsSync"])(e)){return}console.group("--- Monorail Cross-repository Sync Service ---");const t=JSON.parse(Object(r["readFileSync"])(e).toString());Object.entries(t).forEach(([e,t])=>{console.group(`\nSynchronizing for \`${e}\`...`);synchronizeToRepository(e,t);console.groupEnd()});console.groupEnd();console.log(`\n[✓] Synchronized all files.`)};var G=synchronize;try{process.chdir(n(4).PROJECT_ROOT_DIRECTORY)}catch(e){console.error(e.message);process.exit(1)}const main=async()=>{try{switch(y()){case"CODEGEN":D();return;case"COMPILE":await F();return;case"NO_CHANGED":A();return;case"REBUILD":await m();return;case"SYNC":G();return;default:throw new Error}}catch(e){console.error(e.message);process.exit(1)}};main()}]);