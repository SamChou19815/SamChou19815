module.exports=(()=>{"use strict";var __webpack_modules__={167:(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:true});exports.createJSCodegenService=exports.createJsonCodegenService=void 0;exports.createJsonCodegenService=((e,t,o)=>({name:e,sourceFileIsRelevant:t,run:(e,t)=>o(e,JSON.parse(t))}));exports.createJSCodegenService=((name,sourceFileIsRelevant,run)=>({name:name,sourceFileIsRelevant:sourceFileIsRelevant,run:(sourceFilename,source)=>{const wrappedModuleCodeForEval=`((exports) => { ${source} return exports; })({})`;const evaluatedSource=eval(wrappedModuleCodeForEval);return run(sourceFilename,evaluatedSource)}}))},272:(e,t)=>{Object.defineProperty(t,"__esModule",{value:true});t.githubActionWorkflowToString=t.githubActionJobRunStep=t.githubActionJobActionStep=void 0;t.githubActionJobActionStep=((e,t={})=>({type:"use-action",actionName:e,actionArguments:t}));t.githubActionJobRunStep=((e,t)=>({type:"run",stepName:e,command:t}));const o=e=>{switch(e.type){case"use-action":{const t=`      - uses: ${e.actionName}\n`;if(Object.keys(e.actionArguments).length===0){return t}const o=Object.entries(e.actionArguments).map(([e,t])=>{const o=t.split("\n");if(o.length===1){return`          ${e}: ${o[0]}`}return`          ${e}: |\n${o.map(e=>`            ${e}`).join("\n")}`}).join("\n");return`${t}        with:\n${o}\n`}case"run":{const t=`      - name: ${e.stepName}\n`;const o=e.command.split("\n");if(o.length===1){return`${t}        run: ${o[0]}\n`}return`${t}        run: |\n${o.map(e=>`          ${e}\n`).join("")}`}default:throw new Error}};const n=({jobName:e,jobSteps:t})=>{return`  ${e}:\n    runs-on: ubuntu-latest\n    steps:\n${t.map(o).join("")}`};t.githubActionWorkflowToString=(({workflowName:e,workflowtrigger:{triggerPaths:t,masterBranchOnly:o},workflowSecrets:r=[],workflowJobs:a})=>{const i=`# @generated\n\nname: ${e}\non:\n  push:\n    paths:\n${t.map(e=>`      - '${e}'\n`).join("")}${o?`    branches:\n      - master\n`:""}${r.length>0?`env:\n${r.map(e=>`  ${e}: \${{ secrets.${e} }}`).join("\n")}\n`:""}\njobs:\n${a.map(n).join("")}`;return i})},328:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:true});t.GITHUB_ACTIONS_USE_YARN_CACHE_STEP=t.GITHUB_ACTIONS_SETUP_NODE_STEP=t.GITHUB_ACTIONS_CHECKOUT_STEP=void 0;const n=o(272);t.GITHUB_ACTIONS_CHECKOUT_STEP=n.githubActionJobActionStep("actions/checkout@v2");t.GITHUB_ACTIONS_SETUP_NODE_STEP=n.githubActionJobActionStep("actions/setup-node@v2-beta");t.GITHUB_ACTIONS_USE_YARN_CACHE_STEP=n.githubActionJobActionStep("actions/cache@v2",{path:".yarn/cache\n.pnp.js",key:"yarn-berry-${{ hashFiles('**/yarn.lock') }}","restore-keys":"yarn-berry-"})},843:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:true});t.getYarnWorkspaceWorkflows=t.yarnWorkspaceBoilterplateSetupSteps=void 0;const n=o(747);const r=o(622);const a=o(272);const i=o(328);t.yarnWorkspaceBoilterplateSetupSteps=[i.GITHUB_ACTIONS_CHECKOUT_STEP,i.GITHUB_ACTIONS_SETUP_NODE_STEP,i.GITHUB_ACTIONS_USE_YARN_CACHE_STEP,a.githubActionJobRunStep("Yarn Install","yarn install --immutable")];t.getYarnWorkspaceWorkflows=(e=>{const o=t=>{var o,a;return((a=(o=JSON.parse(n.readFileSync(r.join(e.information[t].workspaceLocation,"package.json")).toString()))===null||o===void 0?void 0:o.scripts)===null||a===void 0?void 0:a.deploy)!=null};return Object.fromEntries([...e.topologicallyOrdered.filter(o).map(o=>{const n=`cd-${o}`;return[n,{workflowName:`CD ${o}`,workflowtrigger:{triggerPaths:[...e.information[o].dependencyChain.map(t=>`${e.information[t].workspaceLocation}/**`),"configuration/**",`.github/workflows/generated-*-${o}.yml`],masterBranchOnly:true},workflowSecrets:["FIREBASE_TOKEN"],workflowJobs:[{jobName:"deploy",jobSteps:[...t.yarnWorkspaceBoilterplateSetupSteps,a.githubActionJobRunStep("Build",`yarn workspace ${o} build`),a.githubActionJobRunStep("Install firebase-tools","sudo npm install -g firebase-tools"),a.githubActionJobRunStep("Deploy",`yarn workspace ${o} deploy`)]}]}]})])})},24:(e,t,o)=>{const n=o(272);const r=o(328);const a=o(843);const i=o(167);const s=()=>["general",{workflowName:"General",workflowtrigger:{triggerPaths:["**"],masterBranchOnly:false},workflowJobs:[{jobName:"lint",jobSteps:[...a.yarnWorkspaceBoilterplateSetupSteps,n.githubActionJobRunStep("Check Codegen","yarn codegen"),n.githubActionJobRunStep("Check changed","if [[ `git status --porcelain` ]]; then exit 1; fi"),n.githubActionJobRunStep("Format Check","yarn format:check"),n.githubActionJobRunStep("Lint","yarn lint")]},{jobName:"build",jobSteps:[n.githubActionJobActionStep("actions/checkout@v2",{"fetch-depth":"2"}),r.GITHUB_ACTIONS_SETUP_NODE_STEP,r.GITHUB_ACTIONS_USE_YARN_CACHE_STEP,n.githubActionJobRunStep("Yarn Install","yarn install --immutable"),n.githubActionJobRunStep("Build","yarn compile")]},{jobName:"test",jobSteps:[...a.yarnWorkspaceBoilterplateSetupSteps,n.githubActionJobRunStep("Test","yarn test")]}]}];const c=i.createJsonCodegenService("GitHub Actions Workflows Codegen",e=>e==="workspaces.json",(e,t)=>{return[s(),...Object.entries(a.getYarnWorkspaceWorkflows(t))].map(([e,t])=>({outputFilename:`.github/workflows/generated-${e}.yml`,outputContent:n.githubActionWorkflowToString(t)}))});const u={name:"Ignore Files Codegen",sourceFileIsRelevant:e=>e===".gitignore",run:(e,t)=>{const o=`# ${"@"+"generated"}\n\n${t}\n\n# additions\n.yarn\n**/bin/`;return[{outputFilename:".eslintignore",outputContent:o},{outputFilename:".prettierignore",outputContent:o}]}};const p=[c,u];e.exports=p},747:e=>{e.exports=require("fs")},622:e=>{e.exports=require("path")}};var __webpack_module_cache__={};function __webpack_require__(e){if(__webpack_module_cache__[e]){return __webpack_module_cache__[e].exports}var t=__webpack_module_cache__[e]={exports:{}};var o=true;try{__webpack_modules__[e](t,t.exports,__webpack_require__);o=false}finally{if(o)delete __webpack_module_cache__[e]}return t.exports}__webpack_require__.ab=__dirname+"/";return __webpack_require__(24)})();