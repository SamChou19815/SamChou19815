#!/usr/bin/env node
/* eslint-disable @typescript-eslint/no-var-requires */

const { writeFileSync } = require('fs');
const { projectWorkspaces, getDependencyChain } = require('./workspace');

/**
 * @param {string} jobName
 * @returns {string}
 */
const getBoilterPlateSetupSteps = jobName => `jobs:
  ${jobName}:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Set up Node
        uses: actions/setup-node@v1
      - name: Use Yarn Cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/yarn
          key: yarn-\${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}
          restore-keys: yarn-
      - name: Yarn Install
        run: yarn install`;

/**
 * @param {string} workspace
 * @returns {string}
 */
const getPathsString = workspace => {
  const allPaths = [
    ...getDependencyChain(workspace).map(dependency => `packages/${dependency}/**`),
    'package.json',
    'yarn.lock',
    'configuration/**',
    `.github/workflows/generated-*-${workspace}.yml`
  ];
  return allPaths.map(path => `      - ${path}`).join('\n');
};

/**
 * @param {string} workspace
 * @returns {[string, string]}
 */
const generateFrontendCIWorkflow = workspace => {
  const filename = `generated-ci-${workspace}.yml`;
  const content = `# @generated

name: CI ${workspace}
on:
  pull_request:
    paths:
${getPathsString(workspace)}

${getBoilterPlateSetupSteps('build')}
      - name: Compile
        run: yarn workspace ${workspace} compile
`;
  return [filename, content];
};

/**
 * @param {string} workspace
 * @returns {[string, string]}
 */
const generateFrontendCDWorkflow = workspace => {
  const filename = `generated-cd-${workspace}.yml`;
  const content = `# @generated

name: CD ${workspace}
on:
  push:
    branches:
      - master
    paths:
${getPathsString(workspace)}
env:
  FIREBASE_TOKEN: \${{ secrets.FIREBASE_TOKEN }}

${getBoilterPlateSetupSteps('deploy')}
      - name: Build
        run: yarn workspace ${workspace} build
      - name: Deploy
        run: yarn workspace ${workspace} deploy
`;
  return [filename, content];
};

/**
 *
 * @param {{readonly [string, string][]}}
 * @returns {void}
 */
const writeGeneratedFile = ([filename, content]) =>
  writeFileSync(`.github/workflows/${filename}`, content);

projectWorkspaces.forEach(workspace => {
  writeGeneratedFile(generateFrontendCIWorkflow(workspace));
  writeGeneratedFile(generateFrontendCDWorkflow(workspace));
});
